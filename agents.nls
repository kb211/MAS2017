__includes [ "astar.nls" ]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).
  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  capacity
  next_route_index
  bus_route
  cost_graph
  bus_stop_coordinates
  manager_id
  bus_list
  leave_at_next_stop
  
  ;manager variables
  last_bus_count
  workers
  request_list
  signed_contracts
  
  ;worker variables
  current_status
  mission_destination
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  ;ifelse(bus_id mod 2 = 0) [set bus_route [9 8 2 8 6 8 9 20 21 22 12 15 18 15 0 14 23 19 1 11 17 7 13 10 4 5 16 3]] [set bus_route[16 5 4 10 13 7 17 11 1 19 23 14 0 15 18 15 12 22 21 20 9 8 6 8 2 8 9 3]]
  ;set next_route_index 1
  if(bus_type = 1)[
      set capacity 12
  ]
  if(bus_type = 2)[
      set capacity 60
  ]
  if(bus_type = 3)[
      set capacity 150  
  ]
  set cost_graph calculate_graph_cost graph
  set bus_stop_coordinates get_coordinates
  set bus_route []
  set leave_at_next_stop []
  set bus_list []
  
  ifelse (count buses = 1) [
    set manager_id bus_id
    set workers []
    set request_list []
    set signed_contracts []
  ][
    set current_status "idle"
  ]
  
end

to execute-actions
  ifelse bus_id = manager_id [
    manager
  ][if length inbox > 0 [
    inbox-messages
  ]]
  bus-actions
  ; should move somewhere else probably
  if current_stop = mission_destination [
    send-message manager_id (list "finished" current_stop)
    set current_status "idle"
    set mission_destination "None"
  ] 
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                      MANAGER BUS                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to manager
  if (count buses < 10) [
    add-bus 1
    add-bus 2
    add-bus 3
  ]
   
  if (last_bus_count < count buses)[
    let temp_manager_id manager_id
    let temp_workers workers
    ask buses [
      let worker (list bus_id current_status)
      ifelse (not member? first worker map first temp_workers)[
        set temp_workers lput worker temp_workers
      ][
        let index position first worker map first temp_workers
        set temp_workers replace-item index temp_workers worker
      ]
    ]   
    ask buses [
       set manager_id temp_manager_id
       set bus_list map first temp_workers
    ]
    set workers temp_workers
  ]  
  manager-inbox
  manager-requests
end

to manager-inbox   
  foreach inbox[
    let message last ?
    let sender_id item 1 ?
    
    ; message is ["bid" bus_stop bid_value surplus_passengers]
    if first message = "bid"[ 
      ; request is [bus_stop sender_id bid_value surplus_passengers]
      let bid (list item 1 message sender_id item 2 message item 3 message)             
      ; if incoming bid is less than previous lowest bid replace with incoming bid
      ; comparing incoming bid to current lowest bid (if there already is one) for this contract
      ifelse member? item 1 message map first request_list[
        let index position item 1 message map first request_list
        let current_lowest_bid last item index request_list
        if item 2 bid < current_lowest_bid [
          set request_list replace-item index request_list bid
        ]     
      ][
        set request_list lput bid request_list
      ]
    ]

    ; message is ["inform-manager" bus_stop surplus_passengers]
    if first message = "inform-manager"[
      if not member? item 1 message signed_contracts[ 
        send-contracts message workers
      ]       
    ]
     
    if first message = "finished"[
      set signed_contracts remove last message signed_contracts
    ]
  ] 
  set inbox []
end

to manager-requests
  if length request_list > 0 [   
    ;request_list is [[bus_stop sender_id bid_value surplus_passengers]...]
    foreach request_list[
      let bus_stop item 0 ?
      let winner item 1 ?
      let bid_value item 2 ?
      let surplus_passengers item 3 ?
      ; winners_message is ["request" destination_stop]
      let winners_message (list "request" bus_stop)

      ;calculate the distance a new bus would have to travel to the destination
      let new_bus_route a_star 3 bus_stop cost_graph bus_stop_coordinates
      let new_bus_cost calculate-route-length new_bus_route
     
      let add_bus_threshold 4     
      if (count buses < 101)[
        set add_bus_threshold 2 
      ] 
      if(count buses < 201)[
        set add_bus_threshold 3
      ]
     
      ; if the bid winner has a smaller distance to travel to the destination than a new bus would, dont add new bus otherwise add new bus
      ifelse bid_value < new_bus_cost * add_bus_threshold [  
        ; if the cost of going to the destination is 0 then the bus was already headed there and had the capacity to pickup the passengers
        if bid_value != 0 [
          send-message winner winners_message
          set signed_contracts lput bus_stop signed_contracts 
        ]
      ][
        print count buses
        ifelse(surplus_passengers < 12)[
          add-bus 1
        ][
          ifelse(surplus_passengers < 50)[
            add-bus 2
          ][
            add-bus 3 
          ]
        ]
      ] 
    ]
    set request_list [] 
  ] 
end

to send-contracts [contract_message workers_]
  set contract_message replace-item 0 contract_message "contract"
  ;contract_message is ["contract" bus_stop surplus_passengers]
  foreach workers_[
    ; TO-DO: if worker is not busy
    let worker ?
    send-message item 0 worker contract_message
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                      BUS ACTIONS                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to inbox-messages 
  foreach inbox[
    let message last ?
    
    ; message is ["contract" bus_stop surplus_passengers]
    if item 0 message = "contract" and current_status = "idle"[
      let bid_value calculate-pickup-bid message
      ;bid_message is ["bid" bus_stop bid_value, surplus_passengers]
      let bid_message (list "bid" item 1 message bid_value item 2 message)  ; TODO item 2 needed?   
      send-message manager_id bid_message            
    ] 
    
    if item 0 message = "request"[
      set mission_destination item 1 message
      ifelse current_stop != -1 [
        set bus_route a_star current_stop mission_destination cost_graph bus_stop_coordinates
      ][
        set bus_route a_star next_stop mission_destination cost_graph bus_stop_coordinates
      ]
      set current_status "busy"
    ]    
    
    if item 0 message = "inform" [
      request-for-passengers message
    ]
      
    if item 0 message = "request-passengers" [
      set leave_at_next_stop item 1 message
    ]
  ]  
  let destination last item 0 inbox    
  set inbox []
end

; send request for passengers to be left or dropped off at bus_stop
to request-for-passengers [ inform_message ]
  ; inform_message = ["inform" bus_id bus_stop bus_passengers]   if length bus_route > 0 and member? item 2 inform_message sublist bus_route 0 2 [
    let request []
    let to_bus_id item 1 inform_message
    let bus_stop item 2 inform_message
    let passenger_list item 3 inform_message
    ; TODO get-passengers-at-stop current_stop
    ask bus_stops [
      if bus_stop = position name amsterdam_bus_stops_names and length passengers_waiting > 0 [
        foreach passengers_waiting [
          set passenger_list lput ? passenger_list
        ]
      ]
    ]   
    foreach passenger_list [
      if member? item 1 ? bus_route [
        set request lput item 0 ? request
      ]
    ]
    if length request != 0 [
      send-message to_bus_id (list "request-passengers" request)
    ] 
end 

to bus-actions
  ifelse current_stop != -1 [
    
    ; Drop-off passengers
    if(length bus_passengers != 0)[
      foreach bus_passengers [
        ifelse current_stop = item 1 ? [
          drop-off-passenger item 0 ?
        ][
          if not member? item 1 ? bus_route and member? item 0 ? leave_at_next_stop [
            drop-off-passenger item 0 ? 
          ]
        ]
      ]     
    ]
    
    ; Pick-up passengers
    let surplus_passengers 0
    foreach get-passengers-at-stop current_stop [ 
      ifelse length bus_passengers = capacity [
        ;count the number of passengers_left behind
        set surplus_passengers surplus_passengers + 1
      ][
        if member? item 1 ? bus_route or not member? item 0 ? leave_at_next_stop [ 
          pick-up-passenger item 0 ? 
        ]
      ]
    ]         
    if (manager_id != bus_id and manager_id != 0 and surplus_passengers > 0)[
          ;a worker informs in message: ["inform-manager" current_stop surplus_passengers]
          let inform_message (list "inform-manager" current_stop surplus_passengers)
          send-message manager_id inform_message
        ]
    
    ; Get bus_route and travel-to next stop
    ifelse(length bus_route > 1)[
      set bus_route but-first bus_route
    ][

      ifelse(length bus_passengers != 0) [
        ; this ensures that the person that has been on the bus the longest will get priority
        let destination destination_by_waiting_time bus_passengers
        set bus_route a_star current_stop destination cost_graph bus_stop_coordinates
        set bus_route but-first bus_route
      ][
      set bus_route [] 
      set bus_route lput item random length item current_stop graph item current_stop graph bus_route
      ]
    ]    
    travel-to item 0 bus_route  
    ; inform other buses with status message
    let inform_message (list "inform" bus_id item 0 bus_route bus_passengers)
    foreach bus_list [
      let to_bus_id ?
      if to_bus_id != bus_id [
        send-message to_bus_id inform_message
      ]
    ]
    set leave_at_next_stop []
  ]
  [travel-to next_stop] 
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                   HELPER FUNCTIONS                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report destination_by_waiting_time [on_bus]
  let destination item 1 item 0 on_bus 
  report destination  
end

to-report calculate_graph_cost [stop_graph]
  let index 0
  let dist_list []
  foreach stop_graph [
    let loopitem ?
    let stop_dists []
    foreach loopitem [
      let dist get-distance index ?
      set stop_dists lput dist stop_dists
      ]
    set dist_list lput stop_dists dist_list
    set index index + 1
    ]
  report dist_list
end

to-report get_coordinates
  let coordinate_list []
  let list_temp [[][][][][][][][][][][][][][][][][][][][][][][][]]
  ask bus_stops[
    let cor_list []
    set cor_list lput xcor cor_list
    set cor_list lput ycor cor_list
    set list_temp replace-item who list_temp cor_list
  ]
  set coordinate_list list_temp
  report coordinate_list  
end

;to be called by an individual bus
to-report calculate-pickup-bid [waiting_message]
  
  ;waiting_message is ["contract" current_stop surplus_passengers]
  
  let bid 0
  let available_space capacity - length bus_passengers
  let waiting_stop item 1 waiting_message
  let amount_waiting item 2 waiting_message
  
  ifelse(available_space >= amount_waiting)[
     let route []
     ifelse current_stop != -1[
          set route a_star current_stop waiting_stop cost_graph bus_stop_coordinates
          ][   
          set route a_star next_stop waiting_stop cost_graph bus_stop_coordinates
          ]
          
    set bid calculate-route-length route
    ]
  [
    set bid 9000  
  ]
  report bid
end

to-report calculate-route-length [route_]
  
  if length route_ = 1[
    ;play the trump card
    report 0
    ]
  let total_cost 0
  foreach route_ [
    let this_stop ?
    let this_index position this_stop route_
    let upcoming_index this_index + 1
    
    let upcoming_stop item upcoming_index route_
    let ajacent_lengths item this_stop cost_graph
    
    let cost_position position upcoming_stop item this_stop graph
    let cost item cost_position ajacent_lengths
    
    set total_cost total_cost + cost
    if upcoming_stop = last route_[
      report total_cost
      ]
    ]
  
  
end
